#!/usr/bin/python3 -O
"""
Socket Server.


Will listen to port such as '9999'

This Socketserver shall act as the main process for the entire project.
"""

import os, sys
import socketserver
import xml.etree.ElementTree as ET

import smglobal
from smglobal import DEBUG
import smlibaction
import smusicplayer
import smplayfile
import keyboardplay

# {{{ Some convenient functions
def is_command_reset_note(xmlroot):
    return xmlroot.tag == 'command' and 'action' in xmlroot.attrib.keys() and xmlroot.attrib['action'] == 'reset note'
def is_command_reset_all(xmlroot):
    return xmlroot.tag == 'command' and 'action' in xmlroot.attrib.keys() and xmlroot.attrib['action'] == 'reset all'
def is_status_standby():
    return smglobal.ROBOT_STATUS in smglobal.ROBOT_STATUS_LIST and smglobal.ROBOT_STATUS == 'STANDBY'
def is_status_userplay():
    return smglobal.ROBOT_STATUS in smglobal.ROBOT_STATUS_LIST and smglobal.ROBOT_STATUS == 'USERPLAY'
def is_status_userplay_transaction():
    return smglobal.ROBOT_STATUS in smglobal.ROBOT_STATUS_LIST and smglobal.ROBOT_STATUS == 'USERPLAY_TRANSACTION'
def is_status_music():
    return smglobal.ROBOT_STATUS in smglobal.ROBOT_STATUS_LIST and smglobal.ROBOT_STATUS == 'MUSIC'
def is_command_userplay(xmlroot):
    return xmlroot.tag == 'command' and 'action' in xmlroot.attrib.keys() and xmlroot.attrib['action'] == 'state userplay'
def is_command_userplay_transaction(xmlroot):
    return xmlroot.tag == 'command' and 'action' in xmlroot.attrib.keys() and xmlroot.attrib['action'] == 'state userplay_transaction'
def is_command_music(xmlroot):
    return xmlroot.tag == 'command' and 'action' in xmlroot.attrib.keys() and xmlroot.attrib['action'] == 'state music'
def is_command_note_single(xmlroot):
    return xmlroot.tag == 'play' and 'note' in xmlroot.attrib.keys()
def is_command_poweroff(xmlroot):
    return xmlroot.tag == 'command' and 'action' in xmlroot.attrib.keys() and xmlroot.attrib['action'] == 'poweroff'
def is_command_reboot(xmlroot):
    return xmlroot.tag == 'command' and 'action' in xmlroot.attrib.keys() and xmlroot.attrib['action'] == 'reboot'
# }}}

class MyTCPInfoHandler(socketserver.StreamRequestHandler):
    """
    Handler the socket connection.

    Note: self.request is the socket object here.

    use self.request.sendall(byte) to send data is OK.
    """

    timeout = None;

    def errlog(self, logstr):
        if True:#DEBUG:
            print(logstr, file=sys.stderr)

    # Override
    def handle(self):
        """
        Handle input TCP data stream.

        Using XML as data format.
        """
        self.errlog('New connection accepted.')
        while True:

            # {{{ Pre-formatting
            self.errlog('Parsing cmd. STATUS: {}'.format(smglobal.ROBOT_STATUS))
            self.data = self.rfile.readline()                   # DO NOT REMOVE '\n'
            print("Data is {}.".format(self.data))
            if self.data == b'':                                # Connection reset by peer
                print('Connection reset by peer.')
                return
            self.data = self.data.strip(b'\n')                  # REMOVE '\n'
            if self.data == b'':                                # Empty Line
                break
            if self.data == b'\x1b':                            # ESC
                break
            print("From {0}, Received: '{1}'.".format(self.client_address, self.data))
            mydata = ""
            try:
                mydata = self.data.decode('UTF-8') # 1-8
            except UnicodeDecodeError:                          # Not valid unicode(utf-8) input
                print("UnicodeDecodeError happened!")
                continue
            self.errlog('Now the XML to parse is {}.'.format(mydata))
            # }}}

            ########################################################
            # Now begin the real parsing!
            ########################################################
            try:
                xmlroot = ET.fromstring(mydata)
            except xml.etree.ElementTree.ParseError:
                print("XML ParseError!")
                continue

            ###### {{{ High-priority commands

            # No.1 action:reset note
            # Won't be run if in state:userplay or state:userplay_transaction
            if is_command_reset_note(xmlroot):
                if True:#smglobal.ROBOT_STATUS != 'USERPLAY' and smglobal.ROBOT_STATUS != 'USERPLAY_TRANSACTION':
                    self.errlog('Will now reset note.')
                    smlibaction.smActionResetNote()
                continue

            # No.2 action:reset all
            # Will always run
            if is_command_reset_all(xmlroot):
                self.errlog("Received RESET_ALL command.")
                smlibaction.smActionResetAll()
                continue

            # No.3 action:poweroff or action:reboot
            if is_command_poweroff(xmlroot):
                smlibaction.smActionResetAll()
                smlibaction.smPowerOff()
                sys.exit(0)

            if is_command_reboot(xmlroot):
                smlibaction.smActionResetAll()
                smlibaction.smReboot()
                sys.exit(0)

            # No.4 get status
            if (xmlroot.tag == 'command' 
                    and 'action' in xmlroot.attrib.keys() 
                    and xmlroot.attrib['action'] == 'get status'):
                xmlroot = ET.Element('response').set('status', smglobal.ROBOT_STATUS)
                result = self.request.sendall(ET.dump(xmlroot).encode('UTF-8'))
                if result == None:
                    self.errlog('data sent successfully.')
                continue

            ###### }}}

            ### {{{ Parse commands 1 'STANDBY'; Able to change status

            # No.1 'STANDBY'
            if False:#is_status_standby():
                if is_command_userplay(xmlroot):
                    smglobal.ROBOT_STATUS = "USERPLAY"
                    self.errlog('Now enter USERPLAY mode.')
                    continue
                elif is_command_userplay_transaction(xmlroot):
                    smglobal.ROBOT_STATUS = "USERPLAY_TRANSACTION"
                    self.errlog('Now enter USERPLAY_TRANSACTION mode.')
                    continue
                elif is_command_music(xmlroot):
                    smglobal.ROBOT_STATUS = "MUSIC"
                    self.errlog('Now enter MUSIC mode.')
                    continue
                else:
                    self.errlog('NOW IN STANDBY, BUT COMMAND NOT FOUND, ignoring...')
                    continue

            ### }}}
            ### {{{ Parse commands 2 'USERPLAY'

            # No.2 'USERPLAY'
            self.errlog('before the parse of noteplay.')
            if True:#is_status_userplay():
                if is_command_note_single(xmlroot):
                    keyboardplay.kp_play_note_once(xmlroot.attrib['note'])
                else:
                    #self.errlog('NOW IN USERPLAY, BUT COMMAND NOT FOUND')
                    pass

            ### }}}
            ### {{{ Parse commands 3 'USERPLAY_TRANSACTION'

            # No.3 'USERPLAY_TRANSACTION'
            if False:#is_status_userplay_transaction():
                'only one single line will be received, which is the song(note) to be played.'
                if xmlroot.tag == 'transaction':
                    try:
                        smglobal.ROBOT_USERPLAY_TRANSACTION_HANDLER = smplayfile.PlayableNote(mydata)
                        smglobal.ROBOT_USERPLAY_TRANSACTION_HANDLER.play()
                    except:
                        raise

            ### }}}
            ### {{{ Parse commands 4 'MUSIC'

            # No.4 'MUSIC'
            self.errlog('will try the music area.')
            if True:#is_status_music():
                if xmlroot.tag == 'music':
                    self.errlog('xmlroot.tag is music.')
                    if 'action' in xmlroot.attrib.keys() and xmlroot.attrib['action'] == 'get':
                        self.errlog('have action="get".')
                        if 'type' in xmlroot.attrib.keys() and xmlroot.attrib['type'] == 'list':
                            mystr = smusicplayer.smGetMusicList()
                            self.errlog('Will now send music list:{}.'.format(mystr))
                            result = self.request.sendall(mystr+'\n'.encode('UTF-8'))
                            if result == None:
                                self.errlog('data sent successfully.')
                            #result = self.request.sendall(mystr)
                            #if result == None:
                            #    self.errlog('data sent successfully again.')
                        elif 'type' in xmlroot.attrib.keys() and xmlroot.attrib['type'] == 'status':
                            pass # FIXME
                    elif 'action' in xmlroot.attrib.keys():
                        if xmlroot.attrib['action'] == 'play' and 'which' in xmlroot.attrib.keys():
                            self.errlog('Will now play music of {}.'.format(int(xmlroot.attrib['which'])))
                            smusicplayer.smPlayMusicById(int(xmlroot.attrib['which']))
                        elif xmlroot.attrib['action'] == 'pause':
                            self.errlog('will now pause music.')
                            smusicplayer.smPauseMusic()
                        elif xmlroot.attrib['action'] == 'stop':
                            self.errlog('will now stop music.')
                            smusicplayer.smStopMusic()
                    elif 'sound' in xmlroot.attrib.keys():
                        # adjust sound big or small
                        if xmlroot.attrib['sound'] == 'up':
                            # sound up
                            self.errlog('Will Volume Up.')
                            smusicplayer.smIncreaseMusicSound()
                        elif xmlroot.attrib['sound'] == 'down':
                            # sound down
                            self.errlog('Will Volume Down.')
                            smusicplayer.smDecreaseMusicSound()
                    elif 'loop' in xmlroot.attrib.keys():
                        # set loop or not
                        if xmlroot.attrib['loop'] == 'yes':
                            # enable loop
                            self.errlog('Loop Enabled.')
                            smusicplayer._smSendCommand('loop 999')
                        elif xmlroot.attrib['loop'] == 'no':
                            # disable loop
                            self.errlog('Loop Disabled.')
                            smusicplayer._smSendCommand('loop -999')
                    continue # FIXME is it correct?
                else:
                    # TAG IS NOT MUSIC
                    pass

        self.errlog('COMMAND NOT CAUGHT, NOT CONTINUEING.')

         ### }}}

        print('Connection closed by me.')
        return

if __name__ == "__main__":
    HOST, PORT = "0.0.0.0", 9999

    # First of all, change present working directory to smglobal.PROGRAM_PREFIX
    os.chdir(smglobal.PROGRAM_PREFIX)

    # First Run, we should reset the note
    #smlibaction.smActionResetNote()
    # FIXME COMMENTED OUT DUE TO POTENTIAL BUGS

    # Next, open a subprocess of mplayer for playing music
    smusicplayer.smGetMusicPipe()

    ## NOTE Write termination functions
    ## Actually needn't. The Popen()-ed process will terminate automatically.

    # Set robot status for the first time
    smglobal.ROBOT_STATUS = 'STANDBY'

    # Create server and Bind to port
    server = socketserver.TCPServer((HOST, PORT), MyTCPInfoHandler)

    # Activate it. Use CTRL+C to interrupt
    server.serve_forever()
    pass

#  vim: set ts=8 sw=4 tw=0 et :
